{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Your-pet API",
    "description": "API Documentation for Project 42"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://fourtwo-back.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "User Pets",
      "description": "User's Pets endpoint"
    },
    {
      "name": "Pets",
      "description": "Pets endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices endpoints"
    },
    {
      "name": "News",
      "description": "News endpoint"
    },
    {
      "name": "Services",
      "description": "Services endpoint"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "<b>*email</b> - string, the user's email address.  Pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[^_.-]w+([.-]?w+)*(.w{2,3})+$/ <br> <br> <b>*password</b> - string, user password. Must contain min 7, max 32 characters, at least 1 uppercase letter, 1 lowercase letter, and 1 number <br>Pattern: /(?!s)^[^ ]{7,32}$/ <br><br><b>All fields are required!</b>",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest<br> <br><b>If email is not valid</b>:  This email is not valid<br> <b>If the password is not valid</b>:   Password must contain at least 1 uppercase letter and 1 number <b> or </b> password length must be at least 7 characters long and less than or equal to 32 characters long",
            "content": {}
          },
          "409": {
            "description": "Conflict<br> <br>Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "<b>DESCRIPTION OF QUERY PARAMETERS:</b><br> <br><b>*email</b> - string, the user's email address.  Pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[^_.-]w+([.-]?w+)*(.w{2,3})+$/ <br> <br> <b>*password</b> - string, user password. Must contain min 7, max 32 characters, at least 1 uppercase letter, 1 lowercase letter, and 1 number <br>Pattern: /(?!s)^[^ ]{7,32}$/ <br><br><b>All fields are required!</b>",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user is logged in successfully<br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><b>token</b> - string, the user's bearer token<br> <b>email</b> - string, the user's email address in object <b>user</b>.<br><br> ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest<br> <br><b>If email is not valid</b>:  This email is not valid<br> <b>If the password is not valid</b>:   Password must contain at least 1 uppercase letter and 1 number <b> or </b> password length must be at least 7 characters long and less than or equal to 32 characters long",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully logged out",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get user info",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The data was fetched successfully <br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b> <br><br> <b>id</b> - string, user _id <br><br><b>name</b> - string, the user's name. It can contain only Latin and Cyrillic letters, the apostrophe symbol, spaces and hyphens. <br>pattern /^[a-zA-Zа-яА-Я' -]+$/</b> <br><br><b>email</b> - string, the user's email address.  Pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[^_.-]w+([.-]?w+)*(.w{2,3})+$/ <br><br> <b>phone</b> - string, user phone number. Pattern: /^+380d{9}$/ <br><br> <b>city</b> - string, user city. Must contain min 2, max 100. It can contain only Latin and Cyrillic letters, as well as separators in the form of a space or hyphen. At the same time, it does not allow a delimiter string to begin or end and does not allow the use of two delimiters in a row. <br>Pattern: /^[a-zA-Zа-яА-Я]+(?:[s-][a-zA-Zа-яА-Я]+)*$/ <br><br><b>birthday</b> - string, the user's birthday. Date format: DD-MM-YYYY</b><br><br> <b>avatarURL</b> - string, the path to the uploaded user avatar <br><br> <b>imgId</b> - string, cloudinary photo public id <br><br> ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "missing fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's personal data",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "The data was fetched successfully <br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b> <br><br> <b>id</b> - string, user _id <br><br><b>name</b> - string, the user's name. It can contain only Latin and Cyrillic letters, the apostrophe symbol, spaces and hyphens. <br>pattern /^[a-zA-Zа-яА-Я' -]+$/</b> <br><br><b>email</b> - string, the user's email address.  Pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[^_.-]w+([.-]?w+)*(.w{2,3})+$/ <br><br> <b>phone</b> - string, user phone number. Pattern: /^+380d{9}$/ <br><br> <b>city</b> - string, user city. Must contain min 2, max 100. It can contain only Latin and Cyrillic letters, as well as separators in the form of a space or hyphen. At the same time, it does not allow a delimiter string to begin or end and does not allow the use of two delimiters in a row. <br>Pattern: /^[a-zA-Zа-яА-Я]+(?:[s-][a-zA-Zа-яА-Я]+)*$/ <br><br><b>birthday</b> - string, the user's birthday. Date format: DD-MM-YYYY</b><br><br> <b>avatarURL</b> - string, the path to the uploaded user avatar <br><br> <b>imgId</b> - string, cloudinary photo public id <br><br> ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserResponse"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "required": true,
                    "type": "string",
                    "format": "binary",
                    "description": "Select a JPEG or PNG image file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar successfully modified <br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>avatarURL</b> - string, the path to the uploaded user avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "avatarURL": {
                      "type": "string",
                      "description": "The URL of the updated avatar image",
                      "example": "https://res.cloudinary.com/yourpet/image/upload/v1684522847/users-avatars/vtpvot36i0ayt55nsip0.jpg"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Failed to update image in Cloudinary",
            "content": {}
          }
        }
      }
    },
    "/user/avatars": {
      "patch": {
        "tags": ["User"],
        "summary": "Delete user's avatar",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Avatar successfully deleted <br><br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Failed to update image",
            "content": {}
          }
        }
      }
    },
    "/user-pets": {
      "get": {
        "tags": ["User Pets"],
        "summary": "Get the user and his pets ",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful! <br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>user</b> - object with user data:<br><br> <b>_id</b> - string, user _id <br><br> <b>phone</b> - string, user phone number.  <br><br><b>name</b> - string, the user's name. Must contain min 2, max 16 characters. <br><br><b>email</b> - string, the user's email address.  Pattern: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[^_.-]w+([.-]?w+)*(.w{2,3})+$/ <br><br> <b>avatarURL</b> - string, the path to the uploaded user avatar <br><br>  <b>birthday</b> - string, the user's birthday. Example format: DD-MM-YYYY</b><br><br><b>city</b> - string, user city. <br><br><br> <b>pets</b> - array of objects with pet data: <br><br> <b>_id</b> - string, pet id <br><br> <b>name</b> - string, required. The pet's name. <br><br><b>photoURL</b> - file, the pet photo is a JPEG or PNG image file, no larger than 3Mb.<br><br> <b>birthday</b> - string,  required. The pets's birthday, example format: DD-MM-YYYY</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - string, user ID, who owns the pet <br><br> ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserResponse"
                    },
                    "pets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PetResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/pets": {
      "post": {
        "tags": ["Pets"],
        "summary": "Add a new pet",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "<b>DESCRIPTION OF QUERY PARAMETERS:</b><br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br><b>photo</b> - file, the pet photo is a JPEG or PNG image file, no larger than 3Mb.<br><br> <b>birthday</b> - date,  required. The pets's birthday, max date - now, example format: 05-10-2022</b><br><br><b>breed</b> - string, pet breed. Must contain min 2, max 16.<br><br> <b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>All fields are required!</b>",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PetRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pet added successfully <br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br><b>photoURL</b> - file, the pet photo is a JPEG or PNG image file, no larger than 3Mb.<br><br> <b>birthday</b> - date,  required. The pets's birthday, max date - now, example format: 05-10-2022</b><br><br><b>breed</b> - string, pet breed. Must contain min 2, max 16.<br><br> <b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - string, user ID, who owns the pet <br><br> <b>_id</b> - string, user id <br><br>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/pets/{petId}": {
      "delete": {
        "tags": ["Pets"],
        "summary": "Delete pet",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "description": "pet id",
            "type": "string",
            "example": "645cd2bb1915ca1c3dd740bc",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pet card deleted!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Pet card deleted!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        }
      }
    },
    "/notices": {
      "get": {
        "tags": ["Notices"],
        "summary": "Search for notices by categories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "type": "integer",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of notices to retrieve per page",
            "type": "integer",
            "default": 12
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>notices</b> - array, with objects notices <br><br> <b>id</b> - string, notice id <br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1, required if category is sell <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - string,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - object, user ID, email, phone, who owns the notice <br><br> <b>imageURL</b> - string, path to photo <br><br> <b>page</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page <br><br> <b>minPrice</b> - string, the minimum price for a pet, filter parameter <br><br> <b>maxPrice</b> - string, the maximum price for a pet, filter parameter <br><br> <b>minMonths</b> - string, the minimum age for a pet, filter parameter <br><br> <b>maxMonths</b> - string, the maximum age for a pet, filter parameter <br><br> <b>favorite</b> - array of id's of users, who faved this notice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticesResponseOwner"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "default": 1
                    },
                    "limit": {
                      "type": "integer",
                      "default": 12
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "There are no notices for this request",
            "content": {}
          }
        }
      }
    },
    "/notices/{categories}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Search for notices by categories",
        "parameters": [
          {
            "name": "categories",
            "in": "path",
            "description": "The category of the notices to search for",
            "schema": {
              "type": "string",
              "enum": [
                "sell",
                "in-good-hands",
                "lost-found",
                "favorites-ads",
                "my-ads"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "type": "integer",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of notices to retrieve per page",
            "type": "integer",
            "default": 12
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>notices</b> - array, with objects notices <br><br> <b>id</b> - string, notice id <br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1, required if category is sell <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - string,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - object, user ID, email, phone, who owns the notice <br><br> <b>imageURL</b> - string, path to photo <br><br> <b>page</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page <br><br> <b>minPrice</b> - string, the minimum price for a pet, filter parameter <br><br> <b>maxPrice</b> - string, the maximum price for a pet, filter parameter <br><br> <b>minMonths</b> - string, the minimum age for a pet, filter parameter <br><br> <b>maxMonths</b> - string, the maximum age for a pet, filter parameter <br><br> <b>favorite</b> - array of id's of users, who faved this notice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticesResponseOwner"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "default": 1
                    },
                    "limit": {
                      "type": "integer",
                      "default": 12
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "There are no notices for this request",
            "content": {}
          }
        }
      }
    },
    "/notices/{categories}?{query}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Search for notices by categories and title",
        "parameters": [
          {
            "name": "categories",
            "in": "path",
            "description": "The categories of the notices to search for",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "sell",
                "in-good-hands",
                "lost-found",
                "favorites-ads",
                "my-ads"
              ]
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search query to match against notice titles",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of notices to retrieve per page",
            "required": false,
            "type": "integer",
            "default": 12
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>notices</b> - array, with objects notices <br><br> <b>id</b> - string, notice id <br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1, required if category is sell <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - string,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - object, user ID, email, phone, who owns the notice <br><br> <b>imageURL</b> - string, path to photo <br><br> <b>page</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page <br><br> <b>minPrice</b> - string, the minimum price for a pet, filter parameter <br><br> <b>maxPrice</b> - string, the maximum price for a pet, filter parameter <br><br> <b>minMonths</b> - string, the minimum age for a pet, filter parameter <br><br> <b>maxMonths</b> - string, the maximum age for a pet, filter parameter <br><br> <b>favorite</b> - array of id's of users, who faved this notice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticesResponse"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "default": 1
                    },
                    "limit": {
                      "type": "integer",
                      "default": 12
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "There are no notices for this request",
            "content": {}
          }
        }
      }
    },
    "/notices/{noticeId}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notice by id",
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "description": "Notice id",
            "required": true,
            "type": "string",
            "example": "645cd2bb1915ca1c3dd740ba"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>notice</b> - notice object with properties <br><br> <b>id</b> - string, notice id <br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1, required if category is sell <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - string,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - object, user ID, email, phone, who owns the notice <br><br> <b>imageURL</b> - string, path to photo <br><br> <b>page</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page <br><br> <b>minPrice</b> - string, the minimum price for a pet, filter parameter <br><br> <b>maxPrice</b> - string, the maximum price for a pet, filter parameter <br><br> <b>minMonths</b> - string, the minimum age for a pet, filter parameter <br><br> <b>maxMonths</b> - string, the maximum age for a pet, filter parameter <br><br> <b>favorite</b> - array of id's of users, who faved this notice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id",
            "content": {}
          },
          "404": {
            "description": "Notice not found",
            "content": {}
          }
        }
      }
    },
    "/notices/user/favorite": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get favorites notices by User ",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>notices</b> - array, with objects notices <br><br> <b>id</b> - string, notice id <br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1, required if category is sell <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - string,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - object, user ID, email, phone, who owns the notice <br><br> <b>imageURL</b> - string, path to photo <br><br> <b>page</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page <br><br> <b>minPrice</b> - string, the minimum price for a pet, filter parameter <br><br> <b>maxPrice</b> - string, the maximum price for a pet, filter parameter <br><br> <b>minMonths</b> - string, the minimum age for a pet, filter parameter <br><br> <b>maxMonths</b> - string, the maximum age for a pet, filter parameter <br><br> <b>favorite</b> - array of id's of users, who faved this notice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64633604842359b372cc3d83"
                    },
                    "favorite": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticesResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "There are no notices for this request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notices/user/favorite/{noticeId}": {
      "patch": {
        "tags": ["Notices"],
        "summary": "Toggle favorite notice status by id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "description": "Notice id",
            "required": true,
            "type": "string",
            "example": "645cd2bb1915ca1c3dd740ba"
          },
          {
            "name": "favorite",
            "in": "path",
            "description": "Favorite status",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite status changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Notice faved"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameter 'favorite' is required and can have a value 'true' or 'false'",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/notices/user": {
      "post": {
        "tags": ["Notices"],
        "summary": "Create User notice by categories",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "imageURL": {
                    "type": "file",
                    "format": "binary"
                  },
                  "title": {
                    "type": "string",
                    "description": "string, notice title"
                  },
                  "name": {
                    "type": "string",
                    "description": "string. The pet's name. Must contain min 2, max 16."
                  },
                  "birthday": {
                    "type": "string",
                    "description": "date. The pets's birthday, max date - now. Format - 15-05-2021"
                  },
                  "breed": {
                    "type": "string",
                    "description": "string, pet breed. Must contain min 2, max 16."
                  },
                  "place": {
                    "type": "string",
                    "description": "string, format city"
                  },
                  "price": {
                    "type": "integer",
                    "description": "integer, minimum 1. Price for pet. Required for sell category"
                  },
                  "sex": {
                    "type": "string"
                  },
                  "comments": {
                    "type": "string",
                    "description": "string, сomment on the pet. Must contain min 8, max 120."
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NoticesRequest"
                  },
                  {
                    "if": {
                      "properties": {
                        "categories": {
                          "const": "sell"
                        }
                      }
                    },
                    "then": {
                      "required": ["price"]
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1 <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - date,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. Must contain min 2, max 16.<br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - string, user ID, who owns the notice <br><br> <b>photoURL</b> - string, path to photo <br><br> <b>photoPublicId</b> - string, cloudinary photo public id <br><br><b>_id</b> - string, notice id ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticesResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": ["Notices"],
        "summary": "Get User notices",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Requested page number"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12
            },
            "description": "Number of notices per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>notices</b> - array, with objects notices <br><br> <b>id</b> - string, notice id <br><br> <b>title</b> - string, notice title <br><br> <b>categories</b> - string, notice category, 1 of 5 categories (sell, in-good-hands, lost-found, favorites-ads, my-ads) <br><br> <b>price</b> - string, minimum 1, required if category is sell <br><br> <b>name</b> - string, required. The pet's name. Must contain min 2, max 16.<br><br> <b>birthday</b> - string,  required. The pets's birthday</b><br><br><b>breed</b> - string, pet breed. <br><br> <b>place</b> - string, format city <br><br><b>sex</b> - string, 1 of 2 (male, female) <br><br><b>comments</b> - string, сomment on the pet. Must contain min 8, max 120.<br><br> <b>owner</b> - object, user ID, email, phone, who owns the notice <br><br> <b>imageURL</b> - string, path to photo <br><br> <b>page</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page <br><br> <b>minPrice</b> - string, the minimum price for a pet, filter parameter <br><br> <b>maxPrice</b> - string, the maximum price for a pet, filter parameter <br><br> <b>minMonths</b> - string, the minimum age for a pet, filter parameter <br><br> <b>maxMonths</b> - string, the maximum age for a pet, filter parameter <br><br> <b>favorite</b> - array of id's of users, who faved this notice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NoticesResponseOwner"
                      }
                    },
                    "page": {
                      "type": "integer",
                      "default": 1
                    },
                    "limit": {
                      "type": "integer",
                      "default": 12
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/notices/user/{noticeId}": {
      "delete": {
        "tags": ["Notices"],
        "summary": "remove User notice by id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "description": "Notice id",
            "required": true,
            "type": "string",
            "example": "645cd2bb1915ca1c3dd740ba"
          }
        ],
        "responses": {
          "200": {
            "description": "notice deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "notice deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid id",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["News"],
        "summary": "Get news",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The search query to match against notice titles",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "type": "integer",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of notices to retrieve per page",
            "type": "integer",
            "default": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>_id</b> - string, news id <br><br> <b>imgUrl</b> - string, Url to news's image<br><br> <b>title</b> - string, news title <br><br> <b>text</b> - string, news text <br><br> <b>date</b> - string, news date <br><br> <b>url</b> - string, link to the source<br><br> <b>id</b> - string, news id on source <br><br> <b>total</b> - integer, total objects <br><br> <b>totalPages</b> - integer, total pages <br><br> <b>currentPage</b> - integer, current page <br><br> <b>limit</b> - integer, the maximum number of notices to retrieve per page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "news": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NewsResponse"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "default": 1
                    },
                    "totalPages": {
                      "type": "integer",
                      "default": 1
                    },
                    "currentPage": {
                      "type": "integer",
                      "default": 1
                    },
                    "limit": {
                      "type": "integer",
                      "default": 6
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "There are no news",
            "content": {}
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": ["Services"],
        "summary": "Our friends",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation<br><br> <b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>_id</b> - string, news id <br><br> <b>imgURL</b> - string, URL to news's image<br><br> <b>title</b> - string, news title <br><br> <b>text</b> - string, news text <br><br> <b>date</b> - string, news date <br><br> <b>url</b> - string, link to the source<br><br> <b>id</b> - string, news id on source ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResponse"
                }
              }
            }
          },
          "404": {
            "description": "No services found",
            "content": {}
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationLoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "pattern": "/^([a-z0-9_-]+.) *[a-z0-9_-]+@[a-z0-9_-]+(.[ a-z0-9_-]+)*. [a-z] {2,6}$/",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*d).*$/",
            "example": "Qwert123"
          }
        }
      },
      "RegistrationLoginResponse": {
        "type": "object",
        "required": ["user", "token"],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NWRlMTIzNTVlNWM4MDM0ODQ0Y2Q0MCIsImlhdCI6MTY4Mzg3NzgyNywiZXhwIjoxNjgzOTQyNjI3fQ.Cl7kfx9Tm-125ffgMKQGOzR9WhTH_dYET1B75hFjZyk"
          },
          "user": {
            "type": "object",
            "required": ["email"],
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "example": {
          "email": "pulazu@mailinator.com",
          "birthday": "22-01-2001",
          "name": "Paul",
          "phone": "+380937654321",
          "city": "Lviv"
        },
        "anyOf": {
          "name": {
            "type": "string",
            "description": "Username"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number"
          },
          "city": {
            "type": "string",
            "description": "User's city of residence"
          },
          "imgId": {
            "type": "string",
            "description": "Cloudinary photo public id"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "required": ["email", "avatarURL"],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NWRlMTIzNTVlNWM4MDM0ODQ0Y2Q0MCIsImlhdCI6MTY4Mzg3NzgyNywiZXhwIjoxNjgzOTQyNjI3fQ.Cl7kfx9Tm-125ffgMKQGOzR9WhTH_dYET1B75hFjZyk"
          },
          "result": {
            "id": {
              "type": "string",
              "description": "User id"
            },
            "name": {
              "type": "string",
              "description": "Username"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "User email"
            },
            "phone": {
              "type": "string",
              "description": "User phone number"
            },
            "city": {
              "type": "string",
              "description": "User's city of residence"
            },
            "birthday": {
              "type": "string",
              "format": "date",
              "description": "User's birthday"
            },
            "avatarURL": {
              "type": "string",
              "description": "User's avatar URL"
            },
            "imgId": {
              "type": "string",
              "description": "Cloudinary photo public id"
            }
          }
        },
        "example": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NzQ3NDIzMDE5OWEzMTYzNjQ2Zjc1MyIsImlhdCI6MTY4NTM1MzUwNywiZXhwIjoxNjg1Mzk2NzA3fQ.ZVcw5mxW3ohZcH6jjVWe1XImSMxcAJK21zjUIELYYqk",
          "result": {
            "_id": "645e819f374fda194a78304b",
            "name": "Helga",
            "email": "user@example.com",
            "phone": "+380678884455",
            "city": "Lviv",
            "birthday": "15-05-2005",
            "avatarURL": "https://res.cloudinary.com/dc1nv7ign/image/upload/v1685403100/g1vyvmhuvqoxzi6wepkg.png",
            "imgId": "g1vyvmhuvqoxzi6wepkg"
          }
        }
      },
      "NoticesRequest": {
        "type": "object",
        "required": [
          "title",
          "name",
          "birthday",
          "breed",
          "place",
          "sex",
          "photo"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "notice title"
          },
          "price": {
            "type": "integer",
            "default": 1,
            "description": "'Price must be higher than 0'"
          },
          "name": {
            "type": "string",
            "description": "Pet name"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "breed": {
            "type": "string",
            "description": "Pet breed"
          },
          "place": {
            "type": "string",
            "description": "Set place"
          },
          "sex": {
            "type": "string",
            "enum": ["male", "female"],
            "description": "pet gender"
          },
          "comments": {
            "type": "string"
          },
          "photo": {
            "type": "string",
            "description": "Select a JPEG or PNG image file. is a photo file no larger than 3Mb."
          }
        }
      },
      "NoticesResponse": {
        "type": "object",
        "required": [
          "title",
          "categories",
          "name",
          "birthday",
          "breed",
          "place",
          "sex",
          "imageURL",
          "owner"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "notice id"
          },
          "title": {
            "type": "string",
            "description": "notice title"
          },
          "categories": {
            "type": "string",
            "enum": [
              "sell",
              "in-good-hands",
              "lost-found",
              "favorites-ads",
              "my-ads"
            ],
            "description": "Category for notice"
          },
          "price": {
            "type": "integer",
            "default": 1,
            "description": "Price must be higher than 0"
          },
          "name": {
            "type": "string",
            "description": "Pet name"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "breed": {
            "type": "string",
            "description": "Pet breed"
          },
          "place": {
            "type": "string",
            "description": "Set place"
          },
          "sex": {
            "type": "string",
            "enum": ["male", "female"],
            "description": "pet gender"
          },
          "comments": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "imageURL": {
            "type": "string",
            "description": "URL to pet's avatar image"
          }
        },
        "example": {
          "_id": "64662b0e2f3036272304490a",
          "title": "Wanted in Hague",
          "categories": "lost-found",
          "name": "Damned Pyndiy",
          "birthday": "07.10.1952",
          "breed": "Svinosobaka",
          "place": "Mordor",
          "sex": "male",
          "comments": "Highly contagious, don't approach and seek a psychological help after encounter!",
          "owner": "6476642c8c4c64362b029269",
          "imageURL": "http://res.cloudinary.com/dc1nv7ign/image/upload/v1685493346/6476642c8c4c64362b029269_a50%5B1%5D.png.png"
        }
      },
      "NoticesResponseOwner": {
        "type": "object",
        "required": [
          "title",
          "categories",
          "name",
          "birthday",
          "breed",
          "place",
          "sex",
          "imageURL",
          "owner"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "notice id"
          },
          "title": {
            "type": "string",
            "description": "notice title"
          },
          "categories": {
            "type": "string",
            "enum": [
              "sell",
              "in-good-hands",
              "lost-found",
              "favorites-ads",
              "my-ads"
            ],
            "description": "Category for notice"
          },
          "price": {
            "type": "string",
            "default": 1,
            "description": "'Price must be higher than 0'"
          },
          "name": {
            "type": "string",
            "description": "Pet name"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "breed": {
            "type": "string",
            "description": "Pet breed"
          },
          "place": {
            "type": "string",
            "description": "Set place"
          },
          "sex": {
            "type": "string",
            "enum": ["male", "female"],
            "description": "pet gender"
          },
          "comments": {
            "type": "string"
          },
          "owner": {
            "type": "string",
            "description": "owner user id"
          },
          "imageURL": {
            "type": "string",
            "description": "URL to pet's avatar image"
          }
        },
        "example": {
          "_id": "64625f01d235dfcd7d09993a",
          "title": "Colorful Parrot for Your Home",
          "categories": "sell",
          "price": "1500",
          "name": "Dana",
          "birthday": "2023-05-15T16:04:24.183Z",
          "breed": "Bichon",
          "place": "Odesa",
          "sex": "male",
          "comments": "Cute dogy",
          "owner": "6467230dc5bff3d9e61dd929",
          "imageURL": "notices-img/4548164d-6521-4f55-9776-478ae59c8973.jpg"
        }
      },
      "PetRequest": {
        "type": "object",
        "required": ["name", "birthday", "imageURL", "breed", "comments"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Pet's name"
          },
          "imageURL": {
            "type": "string",
            "format": "binary",
            "description": "file, the pet's photo is a JPEG or PNG image file, no larger than 3Mb."
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Pet's birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pet's breed"
          },
          "comments": {
            "type": "string",
            "description": "comments"
          }
        },
        "example": {
          "name": "Hrundel",
          "photoURL": "http://res.cloudinary.com/dc1nv7ign/image/upload/v1685471283/64763e5998c68dd20c4c4b78_pig.jpg.jpg",
          "birthday": "2022-05-16",
          "breed": "Salo",
          "comments": "Awesome piggo"
        }
      },
      "PetResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pet's name"
          },
          "imageURL": {
            "type": "string",
            "description": "Pet's photo URL"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Pet's birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pet's breed"
          },
          "comments": {
            "type": "string",
            "description": "comments"
          },
          "owner": {
            "type": "string"
          },
          "_id": {
            "type": "string",
            "description": "Pet id"
          }
        },
        "example": {
          "name": "Hrundel",
          "birthday": "2022-05-16",
          "breed": "Salo",
          "comments": "Awesome piggo",
          "imageURL": "http://res.cloudinary.com/dc1nv7ign/image/upload/v1685471283/64763e5998c68dd20c4c4b78_pig.jpg.jpg",
          "owner": "64633604842359b372cc3d83",
          "_id": "646362c9d4b09e1d0c295e0b"
        }
      },
      "NewsResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "news id"
          },
          "imgURL": {
            "type": "string",
            "description": "URL to news's image"
          },
          "title": {
            "type": "string",
            "description": "News title"
          },
          "text": {
            "type": "string",
            "description": "News text"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "type": "string",
            "description": "url news"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "_id": "645e59297d3fb5013e50cd6e",
          "imgUrl": "https://www.nytimes.com/images/2023/04/16/magazine/16mag-LOR/16mag-LOR-blog480.jpg",
          "title": "What I Learned Dogsitting for New York City’s Opulent Elite",
          "text": "In a city of yawning class inequality, some side hustles let you glimpse how the other half lives.",
          "date": "2023-04-11T09:00:18.000Z",
          "url": "https://www.nytimes.com/2023/04/11/magazine/dogsitting-rich-new-york.html",
          "id": "nyt://article/8d29f1fc-d146-509d-8ceb-5a5b17d7886b"
        }
      },
      "ServicesResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Service id"
            },
            "title": {
              "type": "string",
              "description": "Service title"
            },
            "url": {
              "type": "string",
              "description": "Service url website"
            },
            "addressUrl": {
              "type": "string",
              "description": "Google Map Location url"
            },
            "imgURL": {
              "type": "string",
              "description": "URL to service's logo"
            },
            "address": {
              "type": "string",
              "description": "Address"
            },
            "workDays": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "isOpen": {
                    "type": "boolean",
                    "description": "Work or Weekend"
                  },
                  "from": {
                    "type": "string",
                    "description": "Start work time"
                  },
                  "to": {
                    "type": "string",
                    "description": "End work time"
                  }
                }
              }
            },
            "phone": {
              "type": "string",
              "description": "Phone number"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "Email"
            }
          }
        },
        "example": [
          {
            "_id": "645e60d47d3fb5013e50d1ef",
            "title": "Притулок для бездомних тварин 'Сіріус'",
            "url": "https://dogcat.com.ua",
            "addressUrl": "https://goo.gl/maps/iq8NXEUf31EAQCzc6",
            "imageUrl": "https://storage.googleapis.com/kidslikev2_bucket/pets-support/images/sponsors/frame_287.png",
            "address": "Fedorivka, Kyiv Oblast, Ukraine, 07372",
            "workDays": [
              {
                "isOpen": false
              },
              {
                "isOpen": false
              },
              {
                "isOpen": false
              },
              {
                "isOpen": false
              },
              {
                "isOpen": false
              },
              {
                "isOpen": true,
                "from": "11:00",
                "to": "16:00"
              },
              {
                "isOpen": true,
                "from": "11:00",
                "to": "16:00"
              }
            ],
            "phone": "+380931934069",
            "email": "sirius@gmail.com"
          },
          {
            "_id": "645e60d47d3fb5013e50d1f3",
            "title": "Притулок для собак Велике серце",
            "url": "https://pethelp.com.ua/interv_yu_z_zasnovnitseyu_pritulku_velike_sertse/",
            "addressUrl": null,
            "imageUrl": "https://storage.googleapis.com/kidslikev2_bucket/pets-support/images/sponsors/frame_286.png",
            "address": "м. Полтава",
            "workDays": null,
            "phone": "+380964792676",
            "email": "pethelp.ukr@gmail.com"
          }
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
